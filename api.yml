# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /login:
    post:
      summary: User login
      operationId: Login
      requestBody:
        description: request body for POST /login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: success response for POST /login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: error response for POST /login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    post:
      summary: Create new user
      operationId: CreateUser
      requestBody:
        description: request body for POST /users
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: success response for POST /users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        default:
          description: error response for POST /users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      description: get user profile based user id
      operationId: profile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: success response for GET users/{id}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        default:
          description: error response for GET users/{id}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      description: update user data
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: request body for PATCH /users/{id}
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: success response for PATCH /users/{id}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
        default:
          description: error response for PATCH /users/{id}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateUserRequest:
      type: object
      required:
        - phone
        - full_name
        - password
      properties:
        phone:
          type: string
        full_name:
          type: string
        password:
          type: string

    CreateUserResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 1

    LoginRequest:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      required:
        - id
        - token
      properties:
        id:
          type: integer
          format: int64
        token:
          type: string

    ProfileResponse:
      type: object
      required:
        - phone
        - full_name
      properties:
        phone:
          type: string
        full_name:
          type: string

    UpdateUser:
      type: object
      required:
        - phone
        - full_name
      properties:
        phone:
          type: string
        full_name:
          type: string

    ErrorResponse:
      type: object
      required:
        - message
        - kind
      properties:
        message:
          type: string
          x-go-type-skip-optional-pointer: true
        kind:
          type: string
          x-go-type-skip-optional-pointer: true
        fields:
          type: array
          x-go-omitempty: true
          x-go-type-skip-optional-pointer: true
          items:
            $ref: '#/components/schemas/ErrorResponseDetail'
          x-go-type: "[]*ErrorResponseDetail"

    ErrorResponseDetail:
      type: object
      properties:
        field:
          type: string
          x-go-type-skip-optional-pointer: true
        error:
          type: string
          x-go-type-skip-optional-pointer: true



# TODO: can unify response or request to same user component
# can be User compenent and add omit omit